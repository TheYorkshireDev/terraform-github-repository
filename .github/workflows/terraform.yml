name: Terraform

on:
  pull_request:

jobs:
  format:
    name: Run terraform fmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2

      - name: Run terraform fmt
        run: |
          terraform fmt -check -recursive -no-color -diff

  validate:
    name: Run terraform validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2

      - name: Run terraform validate
        run: |
          terraform init -backend=false
          terraform validate

  sec:
    name: Run tfsec
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          tfsec_args: --force-all-dirs
          github_token: ${{ secrets.GITHUB_TOKEN }}

  find-terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Generate Matrix
        id: generate-matrix
        run: |
          find . -type f -name "*.tf" -exec dirname "{}" \; | sort -u
          echo "---"
          find . -type f -name "*.tf" -exec dirname "{}" \; | sort -u | jq  --raw-input .  | jq --slurp .
          echo "---"
          LOCATIONS=$(find . -type f -name "*.tf" -exec dirname "{}" \; | sort -u | jq  --raw-input .  | jq --slurp .)
          echo "---"
          echo ${LOCATIONS}
          echo $LOCATIONS
          echo "---"
          echo '$(LOCATIONS)'
          echo '$LOCATIONS'
          echo "---"
          echo "{location}='${LOCATIONS}'" >> $GITHUB_OUTPUT

  # find-terraform:
  #   runs-on: ubunti-latest
  #   outputs:
  #     terraform-location: ${{ steps.generate-matrix.outputs.location }}
  #   steps:
  #     - name: Generate Matrix
  #       id: generate-matrix
  #       run: |
  #         find . -type f -name "*.tf" -exec dirname "{}" \; | sort -u
  #         echo "---"
  #         find . -type f -name "*.tf" -exec dirname "{}" \; | sort -u | jq  --raw-input .  | jq --slurp .
  #         echo "---"
  #         echo ${{ toJSON($(find . -type f -name "*.tf" -exec dirname "{}" \; | sort -u)) }}
  #         echo "---"
  #         find . -type f -name "*.tf" -exec dirname "{}" \; | sort -u | jq  --raw-input .  | jq --slurp .
  #         SERVICES='${{ toJSON($(find . -type f -name "*.tf" -exec dirname "{}" \; | sort -u)) }}'
  #         echo ::set-output name=location::${SERVICES}

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Run terraform validate
        run: |
          # Find all tf
          for project_dir in $(find . -type f -name "*.tf" -exec dirname "{}" \; | sort -u); do
              echo "${project_dir}"
          done

      - name: Update Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`aaa\`
            #### Terraform Initialization ‚öôÔ∏è\`aaaa\`
            #### Terraform Plan üìñ\`aaaa\`
            #### Terraform Validation ü§ñ\`aaaa\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # - name: Render terraform docs inside the README.md and push changes back to PR branch
      #   uses: terraform-docs/gh-actions@v1.0.0
      #   with:
      #     find-dir: .
      #     config-file: .terraform-docs.yml
      #     git-push: "true"

# terraform-docs markdown table --config .terraform-docs.yml --output-mode inject --output-file README.md --output-template <!-- BEGIN_TF_DOCS -->
# {{ .Content }}
# <!-- END_TF_DOCS --> .

# Find all tf
# find "." -name '*.tf'
